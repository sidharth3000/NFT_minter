{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["module","exports","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"onoEAAAA,EAAOC,QAAU,IAA0B,0C,8PCOrCC,EAAY,8BADK,eAMjBC,EAAmB,6CAqJVC,EAnJH,WAER,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAwB,uCAAG,kCAAAC,EAAA,2DACVC,OAAbC,EADuB,EACvBA,SADuB,uBAI3BC,QAAQC,IAAI,gCAJe,0BAO3BD,QAAQC,IAAI,8BAA+BF,GAPhB,uBAURA,EAASG,QAAQ,CAAEC,OAAQ,iBAVnB,OAYP,KAFlBC,EAVyB,QAYlBC,QACHC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GACjDX,EAAkBW,GAIbC,KAEAP,QAAQC,IAAI,+BArBe,4CAAH,qDAyB1BO,EAAa,uCAAG,gCAAAX,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBU,MAAM,iBALU,0CASKV,EAASG,QAAQ,CAAEC,OAAQ,wBAThC,OASZC,EATY,OAWlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCT,EAAkBS,EAAS,IAI3BG,IAhBkB,kDAkBlBP,QAAQC,IAAR,MAlBkB,0DAAH,qDAuBbM,EAAkB,uCAAG,kCAAAV,EAAA,sDAEzB,IAAK,EACkBC,QAAbC,EADN,EACMA,WAIAW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAK7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC9CrB,QAAQC,IAAImB,EAAMC,EAAQC,YAC1Bb,MAAM,kMAAD,OAAmMlB,EAAnM,YAAuN8B,EAAQC,gBAGtOtB,QAAQC,IAAI,0BAGZD,QAAQC,IAAI,kCAEd,MAAOsB,GACPvB,QAAQC,IAAIsB,GAzBW,2CAAH,qDA6BlBC,EAAoB,uCAAG,sCAAA3B,EAAA,oEAEJC,SAAbC,EAFiB,EAEjBA,UAFiB,wBAKjBW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAASzB,EAAkB0B,EAAUC,IAAKJ,GAE/Ed,QAAQC,IAAI,yCATW,SAUJwB,EAAkBC,gBAVd,cAUnBC,EAVmB,OAYvB3B,QAAQC,IAAI,yBAZW,UAajB0B,EAAOC,OAbU,QAcvB5B,QAAQC,IAAI0B,GACZ3B,QAAQC,IAAR,kEAAuE0B,EAAOE,OAfvD,wBAkBvB7B,QAAQC,IAAI,kCAlBW,0DAqBzBD,QAAQC,IAAR,MArByB,0DAAH,qDA0B1B6B,qBAAU,WACRlC,MACC,IAcH,OACE,yBAAKmC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,wBAAb,qBACA,uBAAGA,UAAU,YAAb,yDAGoB,KAAnBrC,EAnBP,4BAAQsC,QAASxB,EAAeuB,UAAU,oCAA1C,qBAMA,4BAAQC,QAASR,EAAsBO,UAAU,oCAAjD,aAeI,yBAAKA,UAAU,oBACb,yBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,MACtD,uBACEJ,UAAU,cACVK,KAAM9C,EACN+C,OAAO,SACPC,IAAI,cAJN,oBA/Ia,oBCDvBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8f5cfda2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter-logo.8cea1391.svg\";","import './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport myEpicNft from './utils/MyEpicNFT.json';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_ADDRESS = \"0xF1aD06077E05ebD0e0c0e8eBC104fE436c560D6F\";\n\nconst App = () => {\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    \n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n\t\t\t\t\tsetCurrentAccount(account)\n          \n          // Setup listener! This is for the case where a user comes to our site\n          // and ALREADY had their wallet connected + authorized.\n          setupEventListener()\n      } else {\n          console.log(\"No authorized account found\")\n      }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}